#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Build in foss.crave.io
on:
  workflow_dispatch:
    inputs:
       BASE_PROJECT:
        description: 'Choose a base project:'
        required: true
        type: choice
        options:
          - 'AOSP'
          - 'LineageOS'
          - 'DerpFest'
          - 'PixelOS'
          - 'RisingOS'
       DEVICE_CODENAME:
        description: "Device codename:"
        required: true
        default: "apollo"
       BUILD_SCRIPT:
        description: 'Build script:'
        required: true
       BUILD_CLEAN:
        description: 'Build using a new/clean machine? (yes/no)'
        default: "no"

jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
        mkdir ${HOME}/bin/
        curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
        mv ${PWD}/crave ${HOME}/bin/
        sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
        envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
        rm -rf ${PWD}/crave.conf.sample          

      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Run crave devspace
      run: |
        crave devspace -- "
        echo "Looking for runner..."
          # Look for whether there's a runner folder set up
        if [ -f actions-runner/run.sh ] ; then
          echo -e '\e[32mRunner found! Restarting it...\e[0m'
        else
          echo -e '\e[31mError! Runner not found!\e[0m'
          exit 1
        fi

        if tmux has-session -t ghactions; then 
          echo -e '\e[32mRunner is already Running\e[0m'
        else 
          tmux kill-session -t ghactions;
          tmux new-session -d -s ghactions 
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter 
          echo -e '\e[32mRunner Started\e[0m'
        fi "

  build:
    timeout-minutes: 960
    name: Build in foss.crave.io
    runs-on: self-hosted
    
    steps:
    
      # Create a build dir
    - name: Set-up build dir
      run: |
        case "${{ github.event.inputs.BASE_PROJECT }}" in
        "AOSP")
          export PROJECTFOLDER="/crave-devspaces/AOSP"
          export PROJECTID="35"
        ;;
        "DerpFest")
          export PROJECTFOLDER="/crave-devspaces/DerpFest-AOSP"
          export PROJECTID="64"
        ;;
        "LineageOS")
          export PROJECTFOLDER="/crave-devspaces/LineageOS"
          export PROJECTID="72"
        ;;
        "PixelOS")
          export PROJECTFOLDER="/crave-devspaces/PixelOS"
          export PROJECTID="82"
        ;;
        "RisingOS")
          export PROJECTFOLDER="/crave-devspaces/RisingOS"
          export PROJECTID="86"
        ;;
        esac
        
          existing_clones=$(crave clone list --json | jq -r '.clones[]."Cloned At"')
          
          for dir in $existing_clones; do
            if [[ "$dir" != "$PROJECTFOLDER" ]]; then
              echo "Removing old project directory: $dir"
              crave clone destroy -y "$dir"
          fi
          done

          # Check if the current project directory exists or create it
          if grep -q "$PROJECTFOLDER" <<< "$existing_clones" && [ "${DCDEVSPACE}" == "1" ]; then
            echo "Base project $PROJECTFOLDER build directory exists! Reusing it."
            echo "BUILD_DIR=$PROJECTFOLDER" >> $GITHUB_ENV
          else
            crave clone create --projectID "$PROJECTID" "$PROJECTFOLDER"
            echo "BUILD_DIR=$PROJECTFOLDER" >> $GITHUB_ENV
          fi

        echo "DEVICE_CODENAME=${{ github.event.inputs.DEVICE_CODENAME }}" >> $GITHUB_ENV
        echo "Building on $PROJECTFOLDER project"

    - name: Set-up persistent hostname
      run: |
        cd ${{ env.BUILD_DIR }}
        
        if [ ! -f ".repo/manifests/crave.yaml" ]; then
            curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/configs/crave.yaml > .repo/manifests/crave.yaml
        fi

    - name: Start Build (Queue)
      continue-on-error: true
      run: |
        cd ${{ env.BUILD_DIR }}

        jq '.projects = []' ~/crave.conf > tmp && mv tmp ~/crave.conf

        crave ssh -- "rm -f out/target/product/${{ env.DEVICE_CODENAME }}/*.zip out/target/product/${{ env.DEVICE_CODENAME }}/*sum"
        
        echo -e '\e[32mYour build is now on queue, check it on foss.crave.io\e[0m'
        if [[ "${{ github.event.inputs.BUILD_CLEAN }}" == "yes" ]]; then
           crave run --clean --no-patch -- "curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/scripts/${{ github.event.inputs.BUILD_SCRIPT }} | bash"
        else
           crave run --no-patch -- "curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/scripts/${{ github.event.inputs.BUILD_SCRIPT }} | bash"
        fi

    - name: Error log
      continue-on-error: true
      run: |
        cd ${{ env.BUILD_DIR }}

        crave pull 'out/error.log'
        echo "Displaying error.log"
        cat out/error.log
        rm -rf out
        exit 0

    - name: Preparing compiled objects
      continue-on-error: false
      run: |
        cd ${{ env.BUILD_DIR }}

        NC='\033[0m'
        RED='\033[0;31m'

        rm -rf *.zip *sum out compiled
        crave pull 'out/target/product/${{ env.DEVICE_CODENAME }}/*.zip'
        rm -f *-ota-*.zip *-eng*.zip lineage*ota.zip aosp*ota.zip statix*ota.zip

        if [ -z "$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')" ]; then
            echo -e ${RED} "#######################################################################"
            echo -e ${RED} "##                    ROM ZIP FILE NOT FOUND!!!                      ##"
            echo -e ${RED} "##     THE BUILD MIGHT'VE FAILED, CANCELLED OR THE RUNNER DIED.      ##"
            echo -e ${RED} "##            CHECK THE ERROR LOG OR GO TO FOSS.CRAVE.IO             ##"
            echo -e ${RED} "#######################################################################${NC}"
            exit 1
        else
            crave pull 'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/recovery.img' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/*.sha256sum' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/*.md5sum' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/boot.img' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/vendor_boot.img'

            mkdir -p compiled
            
            file_name=$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')
            release_title=$(basename "$file_name" .zip)

            mv -f "$file_name" "${{ env.BUILD_DIR }}/compiled/" || true
            mv -f $file_name.sha256sum "${{ env.BUILD_DIR }}/compiled/" 2>/dev/null || true
            mv -f $file_name.md5sum "${{ env.BUILD_DIR }}/compiled/" 2>/dev/null || true
            mv -f "out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/recovery.img" "${{ env.BUILD_DIR }}/compiled/" || true
            mv -f "out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/boot.img" "${{ env.BUILD_DIR }}/compiled/" || true
            mv -f "out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/vendor_boot.img" "${{ env.BUILD_DIR }}/compiled/" 2>/dev/null || true
            
            rm -rf out

            echo "ZIP_FILE=$file_name" >> $GITHUB_ENV
            echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
            echo "RELEASENAME=$release_title" >> $GITHUB_ENV
        fi

    - name: Display files information
      run: |
        cd "${{ env.BUILD_DIR }}/compiled"

        echo "FILE PATH: ${{ env.BUILD_DIR }}/compiled"
        echo "File details:"
        find . -type f -exec ls -lh {} \; | awk '{print $9 ": " $5}'

        file_name=$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')

        if [ -f "$file_name.sha256sum" ]; then
          echo "Comparing ZIP file hash to SHA256 checksum:"
          sha256=$(sha256sum "$file_name" | awk '{print $1}')
          expected_sha256=$(awk '{print $1}' "$file_name.sha256sum")
          echo "Computed SHA256: $sha256"
          echo "Expected SHA256: $expected_sha256"
          if [ "$sha256" = "$expected_sha256" ]; then
            echo -e '\e[32mSHA256 checksum matches!\e[0m'
          else
            echo -e '\e[31mSHA256 checksum does NOT match!\e[0m'
            exit 1
          fi
        elif [ -f "$file_name.md5sum" ]; then
          echo "Comparing ZIP file hash to MD5 checksum:"
          md5=$(md5sum "$file_name" | awk '{print $1}')
          expected_md5=$(awk '{print $1}' "$file_name.md5sum")
          echo "Computed MD5: $md5"
          echo "Expected MD5: $expected_md5"
          if [ "$md5" = "$expected_md5" ]; then
            echo -e '\e[32mMD5 checksum matches!\e[0m'
          else
            echo -e '\e[31mMD5 checksum does NOT match!\e[0m'
            exit 1
          fi
        else
          echo -e '\e[31mNo SHA256 or MD5 checksum file found for $file_name\e[0m'
          exit 1
        fi

    - name: Upload to GitHub releases
      run: |
        cd ${{ env.BUILD_DIR }}

        NC='\033[0m'
        RED='\033[0;31m'

        if ! command -v gh &> /dev/null; then
           echo "gh could not be found. Installing gh..."
           curl -sS https://webi.sh/gh | sh
           source ~/.config/envman/PATH.env
           echo "gh installed."
        fi

        gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

        if [[ -f "${{ env.BUILD_DIR }}/compiled/${{ env.ZIP_FILE }}" ]]; then
           file_size=$(stat -c%s "${{ env.BUILD_DIR }}/compiled/${{ env.ZIP_FILE }}")
           if [[ $file_size -le 2147483648 ]]; then
              gh release create ${{ github.run_id }} --repo ${{ github.repository }} --title ${{ env.RELEASENAME }} --notes "Released on ${{ env.RELEASE_DATE }}"
              gh release upload ${{ github.run_id }} --repo ${{ github.repository }} ${{ env.BUILD_DIR }}/compiled/*
           else
              echo -e ${RED} "#######################################################################"
              echo -e ${RED} "##          ROM ZIP FILE IS TOO LARGE FOR GITHUB RELEASE!!           ##"
              echo -e ${RED} "##         GO TO YOUR DEVSPACE AND UPLOAD IT SOMEWHERE ELSE          ##"
              echo -e ${RED} "#######################################################################${NC}"
              exit 1
           fi
        fi

    - name: Execute if the job is cancelled
      if:  ${{ cancelled() }}
      run: |
        cd ${{ env.BUILD_DIR }}

        crave stop --all

