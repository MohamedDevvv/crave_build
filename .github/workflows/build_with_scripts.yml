#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Build in Crave
on:
  workflow_dispatch:
    inputs:
      BUILD_SCRIPT:
        description: 'Build script to use'
        default: crdroid.sh
        required: true

env:
 chatId: ${{ secrets.TELEGRAM_TO }}
 botToken: ${{ secrets.TELEGRAM_TOKEN }}


jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
          mkdir ${HOME}/bin/
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Run crave devspace
      run: |
        crave -n devspace -- "if tmux has-session -t ghactions; then
          echo "Runner is already Running"
        else
          tmux kill-session -t ghactions;
          tmux new-session -d -s ghactions
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter
          echo "Runner Started"
        fi "

  build:
    timeout-minutes: 960
    name: Build using foss.crave.io
    runs-on: self-hosted
    
    steps:
    
      # Create a build dir
    - name: Set-up build dir
      run: |
       if [ ! -d "/crave-devspaces/build" ]; then
          cd /crave-devspaces
          crave clone create --projectID=72 build
       fi
        echo "BUILD_DIR=/crave-devspaces/build" >> $GITHUB_ENV


    - name: Set-up build script
      run: |
        cd ${{ env.BUILD_DIR }}
        
        if [ -f "build.sh" ]; then
           rm build.sh
        fi
        curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/scripts/${{ github.event.inputs.BUILD_SCRIPT }} > build.sh


    - name: Start compilation (Queue)
      continue-on-error: true
      run: |
        cd ${{ env.BUILD_DIR }}
        jq '.projects = []' ~/crave.conf > tmp && mv tmp ~/crave.conf
        
        bash build.sh

      # Pull Errors and Display them
    - name: Display error.log (if failed)
      if: ${{ failure() }}
      run: |
        cd ${{ env.BUILD_DIR }}

          send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }
        
        crave pull 'out/error.log'
        echo "Displaying out/error.log"
        cat out/error.log
        rm -f out/error.log

        send_telegram_message "Build for Project: ${{ env.ROM_NAME }}%0ADevice: ${{ env.DEVICE_CODENAME }}%0ASTATUS: Failed%0ACheck Info at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}"

    - name: Pull and upload the zip
      if: ${{ success() }}
      continue-on-error: false
      run: |
        cd ${{ env.BUILD_DIR }}

        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }

        rm -rf ${{ env.DEVICE_CODENAME }}
        
        crave pull 'out/target/product/*/*.zip'
        if [ ! -d "${{ env.DEVICE_CODENAME }}" ]; then
            send_telegram_message "Build for Project: ${{ env.ROM_NAME }}%0ADevice: ${{ env.DEVICE_CODENAME}}%0ASTATUS: Failed or Cancelled%0ACheck Progress at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}"
            exit 1
        else
            cd ${{ env.DEVICE_CODENAME }}
            file_name=$(find . -name '*.zip' ! -name '*ota*' -print | sed 's|^\./||')
            echo $file_name
            bash_upload=$(curl -s -F "file=@$file_name" bashupload.com)
            download_link=$(echo "$bash_upload" | grep -o 'wget .*' | sed 's/^wget //')
            echo $download_link
        
            echo "DOWNLOAD_LINK=$download_link" > push_gdrive.txt
            echo "FILE_NAME=$file_name" >> push_gdrive.txt
         fi

    - name: Set-up environment variables
      uses: actions/upload-artifact@v3
      if:  ${{ success() }}
      with:
          name: push-gdrive
          path: ${{ env.BUILD_DIR }}/${{ env.DEVICE_CODENAME }}/push_gdrive.txt

    - name: Execute if the job is cancelled
      if:  ${{ cancelled() }}
      run: |
        cd ${{ env.BUILD_DIR }}

          send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }
        
        crave stop --all

        send_telegram_message "Build for Project: ${{ env.ROM_NAME }}%0ADevice: ${{ env.DEVICE_CODENAME }}%0ASTATUS: Cancelled%0ACheck Info at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}"


  Upload-to-Gdrive:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

  
    steps:

      - name: Download environment variables for Gdrive upload
        uses: actions/download-artifact@v3
        with:
          name: push-gdrive

      - name: Download the zip
        run: |
          export $(cat push_gdrive.txt | xargs)
          rm -rf ${{ github.workspace }}/*
          wget $DOWNLOAD_LINK
          mv *.zip $FILE_NAME

          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
          
      - name: Upload to Google Drive
        uses: adityak74/google-drive-upload-git-action@v0.3
        with:
          credentials: ${{ secrets.GSERVICE }}
          folderId: ${{ secrets.FOLDER_ID }}
          filename: ${{ env.FILE_NAME }}
          overwrite: "true"
 
      - name: Telegram Notification (if success)
        if:  ${{ success() }}
        continue-on-error: true
        run: |
          send_telegram_message() {
            local message="$1"
            curl -s -X POST \
            https://api.telegram.org/bot$botToken/sendMessage \
            -d chat_id=$chatId \
            -d text="$message" \
            -d parse_mode="Markdown"
          }

          send_telegram_message "${{ env.FILE_NAME }} Successfully sent to Google Drive"

      - name: Telegram Notification (if fail)
        if:  ${{ failure() }}
        run: |
         send_telegram_message() {
            local message="$1"
            curl -s -X POST \
            https://api.telegram.org/bot$botToken/sendMessage \
            -d chat_id=$chatId \
            -d text="$message" \
            -d parse_mode="Markdown"
         }

         send_telegram_message "Uploading failed! %0ACheck Info at: https://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}%0A"
